import Mathlib.AdicSpace

universe u

open CategoryTheory GrothendieckTopology AlgebraicGeometry

variable {C : Type*} [Category C]

namespace AdicSpace

def zariskiCoverage : Coverage (AdicSpace.{u}) where
  covering X P := (‚àÄ (Y : AdicSpace) (f : Y ‚ü∂ X), P f ‚Üí IsOpenImmersion f) ‚àß
    ‚àÄ x : X, ‚àÉ (Y : AdicSpace) (f : Y ‚ü∂ X), P f ‚àß x ‚àà Set.range f.hom.base
  -- need to show that the category of adic spaces has pullbacks fist
  pullback X Y f R := sorry

class IsLocalIso {X Y : AdicSpace.{u}} (f : X ‚ü∂ Y) : Prop where
  exists_isOpenImmersion :
    ‚àÄ (x : X.1.carrier), ‚àÉ (U : AdicSpace) (i : U ‚ü∂ X),
      x ‚àà Set.range i.base ‚àß IsOpenImmersion (i ‚â´ f)

variable {X Y : AdicSpace.{u}}

instance (f : X ‚ü∂ Y) [IsOpenImmersion f] : IsLocalIso f := by
  constructor
  intro x
  refine ‚ü®X, ùüô X, ?_, ?_‚ü©
  ¬∑ use x
    rfl
  ¬∑ rw [Category.id_comp]
    infer_instance

/-- A topological cover is a surjective local isomorphism. -/
class IsTopologicalCover (f : X ‚ü∂ Y) : Prop extends IsLocalIso f where
  surjective : Function.Surjective f.hom.base

variable (P : MorphismProperty AdicSpace.{u})

def sourceLocalClosure : MorphismProperty AdicSpace.{u} :=
  fun X _ f ‚Ü¶
    ‚àÄ (x : X.1), ‚àÉ (U : AdicSpace) (i : U ‚ü∂ X),
      x ‚àà Set.range i.base ‚àß P (i ‚â´ f)

def targetLocalClosure : MorphismProperty AdicSpace.{u} :=
  fun _ Y f ‚Ü¶ ‚àÄ (y : Y), ‚àÉ (U : Y.Opens), y ‚àà U ‚àß P (f.restrict U)

/-- An adic space is affinoid if and only if it is isomorphic to the `Spa` of a
Huber pair. -/
class IsAffinoid (X : AdicSpace.{u}) : Prop where
  exists_huberPair_nonempty_iso : ‚àÉ (A : HuberPair.{u}),
    Nonempty ((forgetToPreLVCRS.obj X) ‚âÖ Spa.{u} A)

/-- An morphism of adic spaces is affinoid if the preimage of every
affinoid open is affinoid. -/
class IsAffinoidHom (f : X ‚ü∂ Y) : Prop where
  isAffinoid_preimage (U : Y.Opens) (hU : IsAffinoid U) : IsAffinoid (U.preimage f)

open Opposite

def Hom.appLE (f : X ‚ü∂ Y) (U : Y.Opens) (V : X.Opens) (hUV : V ‚â§ U.preimage f) :
    Œì(Y, U) ‚ü∂ Œì(X, V) :=
  f.1.1.c.app (op U) ‚â´ X.presheaf.map (homOfLE hUV).op

/-- A finite √©tale morphism of adic spaces is an affinoid morphism that
is finite √©tale on affines. -/
class FiniteEtale (f : X ‚ü∂ Y) : Prop extends IsAffinoidHom f where
  finiteEtale_appLE (U : Y.Opens) (hU : IsAffinoid U) :
    (f.appLE U _ le_rfl).1.1.Etale ‚àß (f.appLE U _ le_rfl).1.1.Finite

/-- A morphism of adic spaces is tempered if and only if it is source and target
locally a finite √©tale morphism. -/
abbrev Tempered (f : X ‚ü∂ Y) : Prop :=
  sourceLocalClosure @FiniteEtale f

end AdicSpace
